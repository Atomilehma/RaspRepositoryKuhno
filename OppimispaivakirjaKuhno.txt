Ensimmäiset demot HOORAY

Raspin unboksaaminenhan oli joulu keskellä kesäkurssien alkua. Oli todella hienoa saada katsoa mitä kaikkea oli tarjolla ja kytkeä laitteita toimintakuntoon. Näin jopa sen vaivan, että latasin tuon rasbian-jessie imagen ja pyrin saamaan sen toimintaan. Tietenkään oma läppärini ei tunnistanut tuota muistikorttia, joten sama työ piti tehdä uudestaan toisella kannettavalla. Tämän jälkeen imagen siirtäminen muistikortille oli todella helppo projekti. 

Raspi käynnistyi välittömästi ja jopa mobiilista jaettu netti toimi niin hyvin, että päivitykset sai kätevästi muutettua. Salasana muutettu ja voin sen varmaan tässäkin ilmoittaa: MokPerryPi

käytetyt tunnit 2h

internetyhteyden jakamienn Windows koneella:
tapaus win 10 (luultavasti aivan samat askeleet muillakin versioilla)
	- Avaa network connections
	- oikea klikkaus omaan yhdistettyyn internetyhteyteen
	- properties
	- sharing 
	- "Allow other network users to connect through this computers internet connection"
	- alavalikosta voi valita, mihin nettiyhteyteen jaetaan internet.
	- ok 
	
vncserverin passu on: gitpassu

Etäkäyttö:
X:n asennus oli alkujaan hieman outo systeemi, sillä siinä piti käynnistää putty tottakai erikseen, eikä se tullut mieleen heti. Muutaman ohjeen (http://www.geo.mtu.edu/geoschem/docs/putty_install.html) luettuani saatiin tuo putty-yhteys toimimaan moitteettomasti. Komentorivietäkäytön avulla oli mukava asennella sitten tuo tightvncserver. Tässä huomasin ettei kaikkia päivityksiä oltu asenneltu suoraan vielä raspiin, vain updatet piti asentaa uusiksi. Tämän lisäksi tuli komplikaatioita tuon dpkg pakettien kanssa. Tämä ratkesi komennolla sudo dpkg --configure -a. Tämän jälkeen tuo tightvncserver onnistui.
Kuitenkin todettiin, että sen konfiguroiminen on liian mutkikas operaatio, joten asensin xrdp:n raspiin (sudo apt-get install xrdp)
Asennuksen jälkeen piti rasperry bootata. Tämän jälkeen windowsissa vain remote desktop connection päälle ja rasperryn IP siihen, jonka jälkeen etätyöpöytäkäyttö toimi ilman ongelmia. 

käytetyt tunnit: 2h
===|||===|||===|||===|||===|||===|||===|||===|||===|||===
							Demo2
===|||===|||===|||===|||===|||===|||===|||===|||===|||===
Tehtävä 3
Demon ensimmäinen vaihe oli saada valot vilkkumaan, tämä meni oikeastaan aikalailla vain piirilevyyn tutustumisessa

=================================================
Tehtävä 4
Seuraava tehtävä oli laittaa valo vilkkumaan napin painalluksella, sekä liiketunnistinkoodi. Napin kohdalla kaikki tapahtui aika pitkälti esimerkkikoodin mukaisesti. Liiketunnistimen kanssa kikkailin jo vähän omiani. Esimerkit monimutkaistuivat mielestäni todella hyvällä käyrällä.

=================================================
Tehtävä 5
Liikennevalotehtävä oli oikeastaan todella mielenkiintoinen tehdä. Ensin piti miettiä valojen paikat piirilevyllä jne jne ja tämän jälkeen itse ohjelmallinen toteutus. Oma versioni on kohtuu derp, sillä se ei sisällä yhtään erillistä funktiota vaan koko setti on lätkäisty yhden while true lauseen sisään. Kovinkaan kaunis tämä viritys ei siis ole, mutta toimii mielestäni ihan hyvin. Painiketta painettaessa aletaan etsimään autoja. Mikäli niitä menee, niin odotetaan ja lisätään kärsivällisyysmittariin lisää arvoja. Kun liikennevalojen kärsivällisyysmittari tulee täyteen, se pakottaa autot pysähtymään, jotta jalankulkijat pääsisivät tien yli. Liikennevalotehtävään tuli oikeastaan vähän vahingossa tehtyä nuo bonusominaisuudet, sillä pakkohan liikesensoria ja merkkivaloa oli käyttää, kun ne nyt oli jo piirissä kiinni. Motiivi tehdä tämä demo oli tosi korkea, sillä tehtävänanto oli todella mielenkiintoinen. 

Käytetyt tunnit: 
	demolabrassa piirilevyn kasaus, sekä demot 3-4: 2h
	Liikennevalokoodin tekeminen: 3h 
	
Tehdyt tehtävät: 
	tehtävä 3 [X]
	tehtävä 4 [X]
	tehtävä 5 [X]
	Bonustehtävät [X]
	Näytetty [X]

===|||===|||===|||===|||===|||===|||===|||===|||===|||===
							Demo3
===|||===|||===|||===|||===|||===|||===|||===|||===|||===

Tehtävä 6: Sensori toimintakuntoon ja dataa ruutuun.
Sensorin sain toimintakuntoon tunnilla pienehköllä abustuksella. Datan saaminen sensorista oli kohtuullisen selkeä prosessi ja datan näkeminen ruudulla oli siistiä.

Tehtävä 7: Sensorin dataa Google Sheetsiin
Tämä tehtävänvaihe oli vähän monimutkaisempi, vaikka suurimmat ongelmat oli pelkästään google sheetin tekemisessä. Kiitos rasperry Pin selaimen, millä nuo docsin edittivalikot ei näy. Kun docs oli luotu ja jaettu ja keyt kuntoon, niin pythonin tutoriaalia hieman sorvaamalla data alkoi valumaan mukavasti tuonne sheetsiin. Koodi on siis suureksi osaksi samaa, kuin esimerkki python koodissa ja se löytyy koodikansiosta nimellä TempHumidityMOK.py.	
	
Tehtävä 8: Kamera käyttökuntoon
Kameran käyttöönotto oli kohtuullisen yksinkertainen tehtävä ja ohjeistus tähän kameran käyttöönottoon oli niin hyvät, että kuvaa sai jo muutaman minuutin kikkailulla toimimaan.

Tehtävä 9: Raspin kameran kuvaa ja videoa repoon
Myös videon ottaminen onnistui helposti, sillä komento oli vain aavistuksen erilainen verrattuna kameran käyttöönottoon. 

Tehtävä 10: Liikkeentunnistava kamera.
Liikkeentunnistava kamera vaatikin jo hieman haasteellisemmalta. Onneksi ei niin paljoa. Otin hieman mallia liikkeentunnistuskoodista ja katsoin sen pohjalle mekaniikkaa, millä liikkettä tunnistettaessa kamera ottaa kuvan. Koska totesin, että mahdollisen liikkeen tunnistettaessa olisi mukava saada enemmänkin kuin yksi kuva mahdollisesta murtovarkaasta, linnusta, riistaeläimestä tai siitä mihin tarkoitukseen nyt koko kameraa käyttääkin, päätin määrittää laskurin, mikä juoksee kahteenkymmeneen ja alkaa alusta. Näin liikettä tunnistettaessa kansioon tallentuu kaksikymmentä kuvaa kohteesta. Juoksevan numeroinnin loppuessa siirrytään uudestaan alkuun. 

Koodi löytyy koodikansiosta MotionDetectorCamera.py tiedostona ja kuvat ja videot löytyy KameraKuvat kansiosta

Käytetyt tunnit: 2 ohjauksessa ja 4 kotona.
Tehtävä6[X]
Tehtävä7[X]
Tehtävä8[X]
Tehtävä9[X]
Tehtävä10[X]
Bonustehtävä5[]
Bonustehtävä6[]



	
	
	